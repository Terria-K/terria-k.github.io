---
export const prerender = true;

import Link from "../../../components/Markdown/Link.astro";
import Header from "../../../components/Markdown/Header.astro";
import fs from 'path';
import ArtPreviewLayout from '../../../layouts/ArtPreviewLayout.astro';
import FormattedDate from "../../../components/FormattedDate.astro";
import { Image } from 'astro:assets';
import { getCollection } from "astro:content";
import { Icon } from "astro-icon/components";

export async function getStaticPaths() {
  const pictures: ImageMetadata[] = await Astro.glob("/src/assets/webp_arts/**/*.webp").then(x => x.map(x => x.default));
  const arts = await getCollection("artworks");

  let artworkMds: Record<string, typeof arts[0]> = {};
  arts.forEach(x => {
    artworkMds[x.slug] = x;
  });

  const paths = [];

  for (let picture of pictures) {
    const baseName = fs.basename(picture.src);
    const dateName = baseName.split('.')[0];
    let name = dateName.substring(11).replaceAll("_", " ");
    const date = new Date(dateName.substring(0, 10));
    const slug = name;
    const year = baseName.split("-")[2].substring(0, 4);

    let id = year + "/" + dateName.substring(11).toLowerCase();

    let content: typeof arts[0]["render"] | undefined;
    let description = "";

    const mds = artworkMds[id];
    if (mds !== undefined) {
      if (mds.data.name) {
        name = mds.data.name;
      }

      if (mds.data.description) {
        description = mds.data.description;
      }

      content = mds.render;
    }

    paths.push({
      params: { year, slug },
      props: { picture, name, date, works: slug, content: content, description, year: year }
    })
  }

  return paths;
}


export const components = { a: Link, h1: Header }
const { slug } = Astro.params;
const { picture, name, date, content, description } = Astro.props;

const Content = (content ? await content() : undefined)?.Content;
---

<ArtPreviewLayout title={name} content={description} imageSrc={picture.src}>
  <script is:inline src="https://unpkg.com/htmx.org@1.9.12" slot="head"></script>
  <div class="flex w-full justify-center items-center">
    <div class="grid gap-6 md:grid-cols-2 px-8 md:px-20 max-h-full max-w-full py-8 rounded-md">
      <div class="max-w-[57rem]">
        <Image src={picture} alt={name} loading="eager"/>
      </div>
      <div class="text-white">
        <p class="md:mt-10 font-bold text-2xl lg:text-3xl">{name}</p>
        <p class="text-gray-400 text-2xl lg:text-lg">
          <FormattedDate {date}/>
        </p>
        <p class="py-4 text-gray-300 text-2xl lg:text-lg">{description}</p>
          {
            Content 
            ? <Content {components}/>
            : null
          }
        </p>
      </div>
    </div>
  </div>

  <div class="mx-auto max-w-[76rem] grid gap-4">
    <form class="mx-8" id="comment-form">
      <label>
        <textarea class="w-full py-2 px-2 bg-transparent rounded border-2 border-midnight-light" name="comment" rows="2" placeholder="Write a comment here"/>
      </label>

      <input class="hidden" readonly name="slug" value={slug}/>
      <span id="response"></span>
      <input class="px-4 py-2 my-2 hover:bg-green-400 duration-300 bg-green-600 rounded cursor-pointer" type="submit" value="Send"/>
    </form>
    <div class="relative grid gap-4 pb-10 mx-8" hx-get={`/partials/message?slug=${slug}`} hx-target="this" hx-trigger="load, submit from:#comment-form">
      <Icon class="w-16 h-16" name="svg-spinners:tadpole"/>
    </div>
  </div>

  <script>
    const form = document.getElementById("comment-form") as HTMLFormElement | null;
    const resp = document.getElementById("response");

    form?.addEventListener("submit", async e => {
      e.preventDefault();
      const formData = new FormData(form);

      const access = localStorage.getItem("user-access");

      const res = await fetch("/api/comment", {
        method: "POST",
        body: formData,
        headers: {
          "Authorization": "Bearer " + access
        }
      });

      if (!res.ok) {
        resp!.innerHTML = "<p class=\"text-red-500\">Something went wrong. Please check your internet connection</p>";
      } else {
        resp!.innerHTML = "";
        form.reset();
      }
    })
  </script>

  <style is:inline>
    .message {
      padding: 1rem;
      background-color: var(--col-midnight);
      border-radius: 12px;
    }

    .success {
      color: lightgreen;
    }

    .failed {
      color: red;
    }
  </style>
</ArtPreviewLayout>